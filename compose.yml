services:
    api:
        build:
            context: ./backend/
            dockerfile: Dockerfile
        user: "1000:1000"
        # Supprimer l'exposition directe du port
        # ports:
        #     - "0.0.0.0:${API_PORT}:3000"
        expose:
            - "3000"
        networks:
            - app-network
        depends_on:
            - db
        env_file:
            - .env
        environment:
            DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
            REDIS_URL: "redis://redis:6380"
        volumes:
            - ./backend:/app
            - ./.env:/app/.env
            - ./backend/logs:/app/logs

    db:
        image: postgres:latest
        env_file:
            - .env
        environment:
            POSTGRES_DB: "${POSTGRES_DB}"
            POSTGRES_USER: "${POSTGRES_USER}"
            POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
            POSTGRES_INITDB_ARGS: "--data-checksums"
        volumes:
            - db-data:/var/lib/postgresql/data
            - ./db:/docker-entrypoint-initdb.d
        ports:
            - "5434:${POSTGRES_PORT}"
        networks:
            - app-network

    redis:
        image: redis:alpine
        ports:
            - "6380:6380"
        networks:
            - app-network
        volumes:
            - redis-data:/data
        command: ["redis-server", "--bind", "0.0.0.0", "--port", "6380"]

    caddy:
        image: caddy:latest
        ports:
            - "80:80"
            - "443:443"
        networks:
            - app-network
        volumes:
            - ./Caddyfile:/etc/caddy/Caddyfile
            - caddy-data:/data
            - caddy-config:/config
        depends_on:
            - api
        restart: unless-stopped

volumes:
    db-data:
    redis-data:
    caddy-data:
    caddy-config:

networks:
    app-network:
